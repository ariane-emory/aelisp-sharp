using System.Collections;
using System.Reflection;
using System.Text;
using static System.Console;

//====================================================================================================================================================
static partial class Ae
{
   //=================================================================================================================================================
   // Float class
   //=================================================================================================================================================
   public class Float : Number
   {
      //==============================================================================================================================================
      // Properties
      //==============================================================================================================================================
      protected override int Rank => 3;
      public double Value { get; }

      //==============================================================================================================================================
      // Constructor
      //==============================================================================================================================================
      public Float(double value) => Value = value;

      //==============================================================================================================================================
      // Instance methods
      //==============================================================================================================================================
      protected override string? StringRepresentation => $"{ToPrincString()}";
      public override string ToPrincString() => Value.ToString("0.0");

      //==============================================================================================================================================
      protected override Number Promote()
      {
         throw new NotImplementedException("Float can't be promoted further!");
      }

      //==============================================================================================================================================
      private Float CastAndApplyBinaryOp(Number that, Func<double, double, double> op) => new(op(this.Value, ((Float)that).Value));
      //==============================================================================================================================================
      protected override Float BinaryAdd(Number that) => CastAndApplyBinaryOp(that, (l, r) => l + r);
      protected override Float BinarySub(Number that) => CastAndApplyBinaryOp(that, (l, r) => l - r);
      protected override Float BinaryMul(Number that) => CastAndApplyBinaryOp(that, (l, r) => l * r);
      protected override Float BinaryDiv(Number that) => CastAndApplyBinaryOp(that, (l, r) => l / r);

      //==============================================================================================================================================
      private bool CastAndApplyBinaryCmpToValues(Number that, Func<double, double, bool> cmp) => cmp(Value, ((Float)that).Value);
      //==============================================================================================================================================
      protected override bool BinaryCmpEql(Number that) => CastAndApplyBinaryCmpToValues(that, (l, r) => l == r);
      protected override bool BinaryCmpLessThan(Number that) => CastAndApplyBinaryCmpToValues(that, (l, r)  => l < r);
 
      //==============================================================================================================================================
   }

   //=================================================================================================================================================
}
