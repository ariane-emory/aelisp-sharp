//======================================================================================================================
static partial class Ae
{
   //===================================================================================================================
   // Environment class
   //===================================================================================================================
   public class Env : LispObject
   {
      //================================================================================================================
      // Public types
      //================================================================================================================
      public enum LookupMode { Local, Global, Nearest, };

      //================================================================================================================
      // Public static properties
      //================================================================================================================
      public static bool EnableDebugWrite { get; set; } = false;

      //================================================================================================================
      // Public static methods
      //================================================================================================================
      private static void DebugWrite(string s)
      {
         if (EnableDebugWrite)
            Console.WriteLine(s);
      }

      //================================================================================================================
      // Public properties
      //================================================================================================================
      public LispObject Parent { get; }
      public LispObject Symbols { get; }
      public LispObject Values { get; }

      //================================================================================================================
      // Constructor
      //================================================================================================================
      public Env(LispObject parent, LispObject symbols, LispObject values)
      {
         if (! ((parent is Env) || parent == Nil))
            throw new ArgumentException("Parent must be an Env or Nil");

         if (! (symbols.IsProperList()))
            throw new ArgumentException("Symbols must be a proper list");

         if (! (values.IsProperList()))
            throw new ArgumentException("Values must be a proper list");

         Parent = parent;
         Symbols = symbols;
         Values = values;
      }

      //================================================================================================================
      public Env(LispObject parent, Pair symbols, Pair values)
      {
         Parent = parent;
         Symbols = symbols;
         Values = values;
      }
 
      //================================================================================================================
      // Instance methods
      //================================================================================================================
      public override string ToString() => $"{TypeName}({Parent}, {Symbols.Write()}, {Values.Write()})";
      public override string Write() => ToString();

      //================================================================================================================
      public bool IsRoot => Parent == Nil;

      //================================================================================================================
      public (bool Found, LispObject Object) Lookup(LookupMode mode, Symbol symbol)
      {
         DebugWrite($"Looking up {symbol} in {this}...");

         return (false, Nil); ;
      }

      //================================================================================================================
   }
   //===================================================================================================================
}
